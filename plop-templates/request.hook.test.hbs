/* eslint-disable import/first */
const reactMock = jest.mock('react', () => {
  let value;
  return {
    useState: jest.fn(() => [
      value,
      (val) => {
        value = val;
      },
    ]),
    useEffect: jest.fn((func) => {
      func();
    }),
  };
});

/* eslint-disable-next-line no-unused-vars */
jest.mock('fetch', () => (url: string) => new Promise((resolve) => {
  resolve([]);
}));
import request{{pascalCase name}} from '../{{snakeCase name}}';

it('request {{snakeCase name}}', () => {
  expect.assertions(3);
  const results{{#isTypescript}}: Promise<any[]>{{/isTypescript}} = request{{pascalCase name}}();
  results.then((response{{#isTypescript}}: any[]{{/isTypescript}}) => {
    expect(response).toEqual([]);
  }
  expect(reactMock.useState).toHaveBeenCalled();
  expect(reactMock.useEffect).toHaveBeenCalled();
});

